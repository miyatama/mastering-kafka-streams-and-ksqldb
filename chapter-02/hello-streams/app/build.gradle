/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'com.github.sherter.google-java-format' version '0.9'
}

ext {
  kafkaVersion = '3.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"
    implementation 'org.slf4j:slf4j-api:1.7.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.8.1')
        }
    }
}

application {
    // Define the main class for the application.
    getMainClass().set('com.example.App')
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

googleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude 'src/test/*'
}

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude 'src/test/*'
}

task verifyFormatting(type: VerifyGoogleJavaFormat) {
   source 'src/main'
   include '**/*.java'
   ignoreFailures true
}

tasks.withType(JavaCompile).configureEach { javaCompile ->
   javaCompile.dependsOn 'googleJavaFormat'
   options.compilerArgs << "-Xlint:deprecation"
   options.encoding = 'UTF-8'
}

task runDSL(type: JavaExec) {
    getMainClass().set('com.example.DslExample')
    classpath sourceSets.main.runtimeClasspath
}

task runProcessorAPI(type: JavaExec) {
    getMainClass().set('com.example.ProcessorApiExample')
    classpath sourceSets.main.runtimeClasspath
}
